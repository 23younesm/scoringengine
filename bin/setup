#!/usr/bin/env python
from datetime import datetime, timedelta
from random import choice, randint, sample

import optparse
import os

from scoring_engine.models.inject import Template, Inject
from scoring_engine.models.team import Team
from scoring_engine.models.service import Service
from scoring_engine.models.round import Round
from scoring_engine.models.check import Check
from scoring_engine.models.flag import Flag, Solve

from scoring_engine.models.notifications import Notification
from scoring_engine.models.setting import Setting
from scoring_engine.db import session, init_db, delete_db, verify_db_ready
from scoring_engine.config import config
from scoring_engine.competition import Competition
from scoring_engine.logger import logger
from scoring_engine.version import version
from scoring_engine.engine.basic_check import (
    CHECK_SUCCESS_TEXT,
    CHECK_FAILURE_TEXT,
    CHECK_TIMED_OUT_TEXT,
)


parser = optparse.OptionParser()
parser.add_option("--overwrite-db", action="store_true", default=False)
parser.add_option("--example", action="store_true", default=False)

options, arguments = parser.parse_args()

# In order to handle docker-compose usability
# we have a check to see if the SCORINGENGINE_EXAMPLE environment
# variable is true. If it is, we want to populate
# the db with example data
if "SCORINGENGINE_EXAMPLE" in os.environ and os.environ["SCORINGENGINE_EXAMPLE"].lower() == "true":
    options.overwrite_db = True
    options.example = True

# If the SCORINGENGINE_OVERWRITE_DB environment variable is set
# we want to delete any previous data in the db
if "SCORINGENGINE_OVERWRITE_DB" in os.environ and os.environ["SCORINGENGINE_OVERWRITE_DB"].lower() == "true":
    options.overwrite_db = os.environ["SCORINGENGINE_OVERWRITE_DB"] == "true"

logger.info("Starting Setup v.{0}".format(version))

if not options.overwrite_db:
    if verify_db_ready(session):
        logger.error("Exiting script and not overwriting db...must use --overwrite-db to overwrite data.")
        exit()
    else:
        # Database doesn't exist, so continuing on to setup script
        logger.debug("Database doesn't exist yet...")

logger.info("Setting up DB")
delete_db(session)
init_db(session)

competition_config_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "competition.yaml")
sample_competition_str = open(competition_config_file, "r").read()
competition = Competition.parse_yaml_str(sample_competition_str)
competition.save(session)

about_content = """
<h4>Use the following credentials to login</h4>
<ul>
    <li>whiteteamuser:testpass</li>
    <li>redteamuser:testpass</li>
    <li>team1user1:testpass</li>
    <li>team2user1:testpass</li>
    <li>...</li>
    <li>team10user1:testpass</li>
</ul>"""

welcome_content = """
<style>
    .full-page-background {
      background: #0e0e0e;
      background-image: url('https://psuccso.org/wp-content/themes/ccso/assets/images/background.png');
      background-repeat: repeat-y;
      background-size: 100% auto;
  }
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
    text-align: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f4f4f4;
        }

        h1 {
              color: #25acb7;
    font-size: 3em;
    font-weight: 700;
    word-spacing: 15px;
    letter-spacing: 3px;
    margin-bottom: 1em;
    text-align: center;
        }
  		h2 {
          color:white;
  }

        .button-container {
            margin-top: 20px;
            display: flex;
            gap: 20px;
          place-content: center
        }

        button {
            padding: 10px 20px;
            font-size: 1.1em;
            color: #fff;
            background-color: #007BFF;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #0056b3;
        }
    </style>
<body class="full-page-background">
    <h1>&lt;Competitive Cyber Security Organization/&gt;</h1>
    <h2>Starter Capture-The-Flag (CTF)</h2>
    <div class="button-container">
      <a href="https://wiki.psuccso.org/en/introduction/ccso-sso" target="_blank">
        <button>Create CCSO Account</button>
      </a>
      <a href="https://wiki.psuccso.org/en/introduction/ctfd" target="_blank">
        <button>Getting started with CTFd</button>
      </a>
    </div>
    <div class="button-container">
      <a href="https://psuccso.org" target="_blank">
        <button>Homepage</button>
      </a>
    </div>
</body>
"""

logger.info("Creating the default Settings")
about_page_setting = Setting(name="about_page_content", value=about_content)
session.add(about_page_setting)
session.add(Setting(name="welcome_page_content", value=welcome_content))
session.add(Setting(name="target_round_time", value=config.target_round_time))
session.add(Setting(name="worker_refresh_time", value=config.worker_refresh_time))
session.add(Setting(name="engine_paused", value=config.engine_paused))
session.add(Setting(name="pause_duration", value=config.pause_duration))
session.add(Setting(name="blue_team_update_hostname", value=True))
session.add(Setting(name="blue_team_update_port", value=True))
session.add(Setting(name="blue_team_update_account_usernames", value=True))
session.add(Setting(name="blue_team_update_account_passwords", value=True))
session.add(Setting(name="blue_team_view_check_output", value=True))
session.add(Setting(name="agent_checkin_interval_sec", value=config.target_round_time // 3))
session.add(Setting(name="agent_show_flag_early_mins", value=5))
session.commit()

if options.example:
    # Simulate Rounds
    num_rounds = randint(200, 250)
    logger.info("Simulating " + str(num_rounds) + " rounds")
    for num_round in range(1, num_rounds + 1):
        round_obj = Round(
            number=num_round,
            round_start=datetime.now() - timedelta(hours=randint(0, 24), minutes=randint(0, 60)),
            round_end=datetime.now() + timedelta(hours=randint(0, 24), minutes=randint(0, 60)),
        )
        print(f"{(round_obj.round_start - round_obj.round_end).seconds}")
        # session.add(round_obj)
        services = session.query(Service).all()
        for service in services:
            output = ""
            if randint(0, 1) == 1:
                result = True
                reason = CHECK_SUCCESS_TEXT
                output = "Some random output of a command"
            else:
                result = False
                output = "Errored output"
                if randint(0, 1) == 1:
                    reason = CHECK_FAILURE_TEXT
                else:
                    reason = CHECK_TIMED_OUT_TEXT

            command = "ping -c 1 127.0.0.1"
            check = Check(round=round_obj, service=service)
            check.finished(result, reason, output, command)
            session.add(check)
    session.commit()

    # Simulate Injects
    num_injects = randint(5, 15)
    logger.info("Simulating " + str(num_injects) + " Injects")
    for _ in range(num_injects):
        template = Template(
            title="Journey to Mordor",
            scenario="You have the ring, take it to be destroyed!",
            deliverable="Word document in at least 3 volumes with journalistic evidence of each step of your journey and the destruction of the ring.",
            score=100,
            start_time=datetime.now() - timedelta(hours=randint(0, 24), minutes=randint(0, 60)),
            end_time=datetime.now() + timedelta(hours=randint(0, 24), minutes=randint(0, 60)),
        )
        session.add(template)

        # rubric_0 = Rubric(
        #     deliverable="Damn hobbitses kept my precious!", value=0, template=template
        # )
        # rubric_50 = Rubric(
        #     deliverable="You gave it your best effort, but died along the way.",
        #     value=50,
        #     template=template,
        # )
        # rubric_100 = Rubric(
        #     deliverable="You saved the world!", value=100, template=template
        # )

        # session.add_all([template, rubric_0, rubric_50, rubric_100])

        for team in Team.get_all_blue_teams():
            inject = Inject(
                team=team,
                template=template,
            )
            inject.score = randint(0, 100)
            inject.status = choice(["Draft", "Submitted", "Graded"])
            session.add(inject)
        session.commit()

    # Simulate Notifications
    num_notifications = randint(50, 100)
    logger.info("Simulating " + str(num_notifications) + " Notifications")
    team_ids = [id[0] for id in session.query(Team.id).all()]
    for _ in range(num_notifications):
        notification = Notification(
            message="Test Notification",
            target="/admin/notifications",
        )
        if randint(0, 1) == 1:
            notification.is_read = True
        notification.team_id = choice(team_ids)
        session.add(notification)
        session.commit()

    # Simulate Flags
    num_flags = randint(10, 20)
    logger.info("Simulating " + str(num_flags) + " Flags")
    for _ in range(num_flags):
        flag = Flag(
            start_time=datetime.now() - timedelta(minutes=randint(0, 60)),
            end_time=datetime.now() + timedelta(minutes=randint(0, 60)),
        )
        flag.platform = choice(["nix", "windows"])
        flag.type = choice(["file", "pipe", "net", "reg"])
        flag.perm = choice(["user", "root"])
        flag.data = {"path": "/tmp/flag", "content": "hi"}
        session.add(flag)
        session.commit()

        # Simulate Solves
        for team_id in sample(team_ids, randint(1, len(team_ids))):
            solve = Solve(
                flag=flag,
                host="127.0.0.1",
                team_id=team_id,
            )
            session.add(solve)
            session.commit()
